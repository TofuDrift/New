import pygame.time

from Support import *


class Player(pygame.sprite.Sprite):
    def __init__(self, pos, group):
        super().__init__(group)

        self.animationArchive = None
        self.import_assets()
        self.status = 'Right'
        self.frame_index = 0

        self.image = self.animationArchive[self.status][self.frame_index]
        self.rect = self.image.get_rect(center=pos)
        self.hitBox_rect = pygame.Rect((600, 450), (32, 32))

        self.direction = pygame.math.Vector2()
        self.pos = pygame.math.Vector2(self.rect.center)
        self.speed = 100

        self.count = 0

        self.display_surface = pygame.display.get_surface()

        self.current_health = 100
        self.target_health = 100
        self.max_health = 100
        self.health_bar_length = 400
        self.health_ratio = self.max_health / self.health_bar_length
        self.health_change_speed = 1

        self.cooldown_timer = 0
        self.cooldown_duration = 1

        self.attack = False

        self.enemies_defeated = 0

    def get_damage(self, amount):
        if self.cooldown_timer <= 0:
            if self.target_health > 0:
                self.target_health -= amount
            if self.target_health < 0:
                self.target_health = 0
            self.cooldown_timer = self.cooldown_duration

    def get_health(self, amount):
        if self.target_health < self.max_health:
            self.target_health += amount
        if self.target_health > self.max_health:
            self.target_health = self.max_health

    def update_health(self):
        transition_width = 0
        transition_color = (255, 0, 0)

        if self.current_health < self.target_health:
            self.current_health += self.health_change_speed
            transition_width = int((self.target_health - self.current_health) / self.health_ratio)
            transition_color = (0, 255, 0)

        if self.current_health > self.target_health:
            self.current_health -= self.health_change_speed
            transition_width = int((self.target_health - self.current_health) / self.health_ratio)
            transition_color = (255, 255, 0)

        health_bar_width = int(self.current_health / self.health_ratio)
        health_bar = pygame.Rect(10, 10, health_bar_width, 25)
        transition_bar = pygame.Rect(health_bar.right, 45, transition_width, 25)

        pygame.draw.rect(self.display_surface, (255, 0, 0), health_bar)
        pygame.draw.rect(self.display_surface, transition_color, transition_bar)
        pygame.draw.rect(self.display_surface, (0, 0, 0), (10, 10, self.health_bar_length, 25), 2)

    def import_assets(self):
        self.animationArchive = {'Up': [], 'Up_Attack': [], 'Hurt_Up': [],
                                 'Down': [], 'Down_Attack': [], 'Hurt_Down': [],
                                 'Left': [], 'Left_Attack': [],
                                 'Right': [], 'Right_Attack': [], 'Hurt_Right': [],
                                 'Idle': [],
                                 'Sleep': []}

        for frame in self.animationArchive:
            full_path = 'Images/Sprites/Player/' + frame
            self.animationArchive[frame] = import_folder(full_path)

    def animate(self, delta_time):
        if self.direction.magnitude() == 0:
            if self.status == "Up":
                self.frame_index = 3
            elif self.status == "Down":
                self.frame_index = 0
            elif self.status == "Left":
                self.frame_index = 1
            elif self.status == "Right":
                self.frame_index = 2
            self.image = self.animationArchive['Idle'][int(self.frame_index)]

        else:
            self.frame_index += 5 * delta_time
            if self.frame_index >= len(self.animationArchive[self.status]):
                self.frame_index = 0

            self.image = self.animationArchive[self.status][int(self.frame_index)]

        self.image = resize(self.image, 100, 100)

    def input(self):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_UP] or keys[pygame.K_w]:
            self.direction.y = -1
            self.status = "Up"
        elif keys[pygame.K_DOWN] or keys[pygame.K_s]:
            self.direction.y = 1
            self.status = "Down"
        else:
            self.direction.y = 0

        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.direction.x = -1
            self.status = "Left"
        elif keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.direction.x = 1
            self.status = "Right"
        else:
            self.direction.x = 0

        # for event in pygame.event.get():
        #    if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
        #        if self.direction.y == -1:
        #            self.status = "Up_Attack"
        #        elif self.direction.y == 1:
        #            self.status = "Down_Attack"
        #        elif self.direction.x == -1:
        #            self.status = "Left_Attack"
        #        elif self.direction.x == 1:
        #            self.status = "Right_Attack"

    def move(self, delta_time):
        if self.direction.magnitude() > 0:
            self.direction = self.direction.normalize()

        # Horizontal
        self.pos.x += self.direction.x * self.speed * delta_time
        self.rect.centerx = self.pos.x
        self.hitBox_rect.centerx = self.pos.x + 25
        # Vertical
        self.pos.y += self.direction.y * self.speed * delta_time
        self.rect.centery = self.pos.y
        self.hitBox_rect.centery = self.pos.y + 25

        # Bound Check X
        if self.pos.x <= 0:
            self.pos.x = 0
        elif self.pos.x >= 1000:
            self.pos.x = 1000

        # Bound Check Y
        if self.pos.y <= 0:
            self.pos.y = 0
        elif self.pos.y >= 500:
            self.pos.y = 500


    def update(self, delta_time):
        self.update_health()
        self.input()
        self.animate(delta_time)
        self.move(delta_time)

        if self.cooldown_timer > 0:
            self.cooldown_timer -= delta_time


