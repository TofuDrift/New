import pygame.time

from Support import *


class Player(pygame.sprite.Sprite):
    def __init__(self, pos, group):
        super().__init__(group)

        # Initialize player attributes
        self.animationArchive = None  # Stores animation frames
        self.import_assets()  # Import player assets
        self.status = 'Right'  # Initial status
        self.frame_index = 0  # Initial frame index

        # Set initial image and hitbox
        self.image = self.animationArchive[self.status][self.frame_index]
        self.rect = self.image.get_rect(center=pos)
        self.hitBox_rect = pygame.Rect((600, 450), (32, 32))  # Hitbox dimensions
        self.attack_rect = pygame.Rect((600, 450), (64, 64))  # Attack dimensions

        # Movement attributes
        self.direction = pygame.math.Vector2()  # Direction vector
        self.pos = pygame.math.Vector2(self.rect.center)  # Player position
        self.speed = 150  # Movement speed

        # Counters and timers
        self.count = 0  # General counter
        self.display_surface = pygame.display.get_surface()  # Display surface

        # Health attributes
        self.current_health = 100  # Current health
        self.target_health = 100  # Target health
        self.max_health = 100  # Maximum health
        self.health_bar_length = 400  # Length of health bar
        self.health_ratio = self.max_health / self.health_bar_length  # Health ratio
        self.health_change_speed = 1  # Health change speed

        # Cooldown attributes
        self.cooldown_timer = 0  # Cooldown timer
        self.cooldown_duration = 1  # Cooldown duration

        # Attack attribute
        self.attack = False  # Indicates if player is attacking

        # Enemies defeated counter
        self.enemies_defeated = 0  # Number of enemies defeated

    def get_damage(self, amount):
        # Check if player can take damage (cooldown)
        if self.cooldown_timer <= 0:
            # Reduce target health by the specified amount
            if self.target_health > 0:
                self.target_health -= amount
            # Ensure health doesn't go below 0
            if self.target_health < 0:
                self.target_health = 0
            # Start cooldown timer
            self.cooldown_timer = self.cooldown_duration

    def get_health(self, amount):
        # Increase target health by the specified amount if it's below maximum
        if self.target_health < self.max_health:
            self.target_health += amount
        # Ensure target health doesn't exceed maximum
        if self.target_health > self.max_health:
            self.target_health = self.max_health

    def update_health(self):
        # Initialize transition variables
        transition_width = 0
        transition_color = (255, 0, 0)

        # Increase current health towards target health
        if self.current_health < self.target_health:
            self.current_health += self.health_change_speed
            # Calculate transition width and colour for health increase
            transition_width = int((self.target_health - self.current_health) / self.health_ratio)
            transition_color = (0, 255, 0)

        # Decrease current health towards target health
        if self.current_health > self.target_health:
            self.current_health -= self.health_change_speed
            # Calculate transition width and colour for health decrease
            transition_width = int((self.target_health - self.current_health) / self.health_ratio)
            transition_color = (255, 255, 0)

        # Calculate width of health bar based on current health
        health_bar_width = int(self.current_health / self.health_ratio)
        health_bar = pygame.Rect(10, 10, health_bar_width, 25)
        # Create transition bar next to health bar
        transition_bar = pygame.Rect(health_bar.right, 45, transition_width, 25)

        # Draw health bar and transition bar on display surface
        pygame.draw.rect(self.display_surface, (255, 0, 0), health_bar)  # Draw health bar
        pygame.draw.rect(self.display_surface, transition_color, transition_bar)  # Draw transition bar
        pygame.draw.rect(self.display_surface, (0, 0, 0), (10, 10, self.health_bar_length, 25), 2)  # Draw border

    def import_assets(self):
        # Dictionary to store animation frames for different actions
        self.animationArchive = {
            'Up': [], 'Up_Attack': [], 'Hurt_Up': [],
            'Down': [], 'Down_Attack': [], 'Hurt_Down': [],
            'Left': [], 'Left_Attack': [],
            'Right': [], 'Right_Attack': [], 'Hurt_Right': [],
            'Idle': [],
            'Sleep': []
        }

        # Populate animationArchive with frames from respective folders
        for frame in self.animationArchive:
            full_path = 'Images/Sprites/Player/' + frame  # Path to folder containing frames
            self.animationArchive[frame] = import_folder(full_path)  # Import frames

    def animate(self, delta_time):
        # If player is not moving
        if self.direction.magnitude() == 0:
            # Set frame index based on current status
            if self.status == "Up":
                self.frame_index = 3
            elif self.status == "Down":
                self.frame_index = 0
            elif self.status == "Left":
                self.frame_index = 1
            elif self.status == "Right":
                self.frame_index = 2
            # Set image to idle animation frame
            self.image = self.animationArchive["Idle"][int(self.frame_index)]
        else:
            # Increment frame index based on elapsed time
            self.frame_index += 5 * delta_time
            # Loop animation frames
            if self.frame_index >= len(self.animationArchive[self.status]):
                self.frame_index = 0
            # Set image to current animation frame
            self.image = self.animationArchive[self.status][int(self.frame_index)]

        # Resize image to 100x100
        self.image = resize(self.image, 100, 100)

    def input(self):
        # Get the state of all keyboard keys
        keys = pygame.key.get_pressed()

        # Handle vertical movement
        if keys[pygame.K_UP] or keys[pygame.K_w]:
            self.direction.y = -1
            self.status = "Up"
        elif keys[pygame.K_DOWN] or keys[pygame.K_s]:
            self.direction.y = 1
            self.status = "Down"
        else:
            self.direction.y = 0

        # Handle horizontal movement
        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.direction.x = -1
            self.status = "Left"
        elif keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.direction.x = 1
            self.status = "Right"
        else:
            self.direction.x = 0

        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.attack = True

    def move(self, delta_time):
        # Normalise direction vector if its magnitude is greater than 0
        if self.direction.magnitude() > 0:
            self.direction = self.direction.normalize()

        # Move horizontally
        self.pos.x += self.direction.x * self.speed * delta_time
        self.rect.centerx = self.pos.x
        self.hitBox_rect.centerx = self.pos.x + 25  # Adjust hitbox position
        self.attack_rect.centerx = self.pos.x + 25

        # Move vertically
        self.pos.y += self.direction.y * self.speed * delta_time
        self.rect.centery = self.pos.y
        self.hitBox_rect.centery = self.pos.y + 25  # Adjust hitbox position
        self.attack_rect.centery = self.pos.y + 25

        # Check bounds for X coordinate
        if self.pos.x <= 0:
            self.pos.x = 0
        elif self.pos.x >= 1000:
            self.pos.x = 1000

        # Check bounds for Y coordinate
        if self.pos.y <= 0:
            self.pos.y = 0
        elif self.pos.y >= 500:
            self.pos.y = 500

    def update(self, delta_time):
        # Update player's health display
        self.update_health()
        # Process player input
        self.input()
        # Update player's animation based on elapsed time
        self.animate(delta_time)
        # Move player based on current input and elapsed time
        self.move(delta_time)

        # Reduce cooldown timer if it's greater than 0
        if self.cooldown_timer > 0:
            self.cooldown_timer -= delta_time
