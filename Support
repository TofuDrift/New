from os import walk

import pygame, string

class Button:
    def __init__(self, button_x, button_y, image1, image2):
        self.image1 = imageload(image1, "Unselected")
        self.image2 = imageload(image2, "Selected")
        self.image = ""
        self.rect = self.image1.get_rect()
        self.rect.left, self.rect.centery = button_x, button_y
        self.isHover = False

    def draw(self, screen):
        if self.isHover:
            self.image = self.image2
        else:
            self.image = self.image1
        mousepos = pygame.mouse.get_pos()
        if self.rect.collidepoint(mousepos):
            self.isHover = True
        else:
            self.isHover = False
        screen.blit(self.image, self.rect)

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)


class InputBox:
    def __init__(self, label, inputBox_x, inputBox_y, width, height, masked=False, error_active=False):
        self.font = None

        self.rect_label = pygame.Rect(inputBox_x, inputBox_y - 20, width // 2, height)
        self.label = label

        self.textbox_rect = pygame.Rect(inputBox_x, inputBox_y, width, height)
        self.rect_text = pygame.Rect(inputBox_x + 5, inputBox_y + (height / 4), width // 2, height)
        self.text = ""
        self.store_text = ""

        self.error_rect = pygame.Rect(inputBox_x + 250, inputBox_y, width, height)
        self.error_textbox_rect = pygame.Rect(inputBox_x + 255, inputBox_y + 5, width, height)
        self.error_message = ""
        self.error_active = error_active

        self.acceptable = string.punctuation + string.digits + string.ascii_letters
        self.masked = masked
        self.activated = False

    def error(self, errorMessage):
        self.error_message = errorMessage

    def reset(self):
        self.error_active = False
        self.text = ""
        self.store_text = ""

    def draw(self, screen):
        self.font = pygame.font.Font(None, 20)
        label = self.font.render(self.label, False, "#FFFFFF")
        text = self.font.render(self.text, False, "#FFFFFF")
        if self.error_active:
            error = self.font.render(self.error_message, True, "#FF0000")
            # pygame.draw.rect(screen, '#FF0000', self.error_rect, 2)
            screen.blit(error, self.error_textbox_rect)
        else:
            self.error_message = ""

        if not self.activated:
            pygame.draw.rect(screen, '#FFFFFF', self.textbox_rect, 2)
        else:
            pygame.draw.rect(screen, '#00FF00', self.textbox_rect, 2)

        screen.blit(text, self.rect_text)
        screen.blit(label, self.rect_label)

    def event_handler(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.textbox_rect.collidepoint(event.pos):
                self.activated = True
            else:
                self.activated = False

        if self.activated:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE:
                    self.text = self.text[:-1]
                    if self.masked:
                        self.store_text = self.store_text[:-1]
                else:
                    if event.unicode in self.acceptable:
                        if self.masked:
                            self.store_text += event.unicode
                            self.text += "*"
                        else:
                            self.text += event.unicode


class TextBox:
    def __init__(self, x, y, label, value, size, colour,type = 1):
        if size is None:
            self.size = 24
        else:
            self.size = size
        if colour is None:
            self.colour = "#000000"
        else:
            self.colour = colour
        self.rect = pygame.Rect(x, y, 10, 10)
        self.label = f"{label}: "
        self.value = value
        self.text = self.label + self.value
        self.type = type

    def draw(self, screen):
        self.font = pygame.font.Font(None, self.size)
        text = self.font.render(self.text, False, self.colour)
        if self.type == 2:
            textrect = text.get_rect(topleft= self.rect.topleft)
            pygame.draw.rect(screen,(0,0,0),textrect,2,25)
        screen.blit(text, self.rect)




    def update(self, value):
        self.value = value
        self.text = self.label + self.value

def import_folder(path):
    surface_list = []

    for folder_name, sub_folder_name, img_file in walk(path):
        for image in img_file:
            if image.endswith('.png'):
                full_path = path + '/' + image
                image_surface = pygame.image.load(full_path).convert_alpha()
                surface_list.append(image_surface)

    return surface_list


def resize(image, width, height):
    return pygame.transform.scale(image, (width, height))


def xflip(image, xbool):
    if xbool == False:
        return pygame.transform.flip(image, False, False)
    elif xbool == True:
        return pygame.transform.flip(image, True, False)


def imageload(image, type):
    if ".png" not in image:

        return pygame.image.load(f"Images\\UI Buttons\\{type} Buttons\\{image}.png")
    else:
        return pygame.image.load(f"Images\\UI Buttons\\{type} Buttons\\{image}")


def check_password(password):
    upper = False
    num = False
    special = False
    errorMessages = []

    for i in password:
        if i.isupper():
            upper = True
    for i in password:
        if i.isalnum():
            num = True

    if not password.isalnum():
        special = True

    if upper and num and special:
        return True, ""

    if len(password) < 8:
        errorMessages.append("Password is not 8 characters long.")
    if not special:
        errorMessages.append("Password does not contain special characters.")
    if not upper:
        errorMessages.append("Password does not contain uppercase.")
    if not num:
        errorMessages.append("Password does not contain lowercase or numerical value.")
    return False, errorMessages
